name: Release Candidate

on:
  workflow_dispatch:
  pull_request:
    branches:
      - releases/**
    types:
      - synchronize

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release-candidate:
    runs-on: ubuntu-latest
    steps:
      # Checkout code based on the event type
      - name: Checkout code for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Checkout code for pull_request
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Check tags
        shell: bash
        run: git fetch origin --tags

      - name: Calculate version bump
        id: commitizen
        uses: commitizen-tools/commitizen-action@master
        with:
          commit: false
          push: false
          changelog_increment_filename: body.md

      - name: Create release PR
        shell: bash
        if: github.event_name == 'workflow_dispatch' && steps.commitizen.outputs.version != ''
        run: |
          RELEASE_VERSION=${{ steps.commitizen.outputs.version }}
          RELEASE_BRANCH=release/$RELEASE_VERSION

          if ! git ls-remote --heads origin $RELEASE_BRANCH | grep -q 'refs/heads'; then
            git checkout -b $RELEASE_BRANCH
            git push origin $RELEASE_BRANCH
          fi

          if ! gh pr list --head $RELEASE_BRANCH --label "release" | grep -q $RELEASE_BRANCH; then
            gh pr create \
              --base master \
              --head $RELEASE_BRANCH \
              --title "Release v${RELEASE_VERSION}" \
              --body "$(cat body.md)" \
              --label release
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Update PR Body
        if: github.event_name == 'pull_request' && github.event.action == 'synchronize'
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('body.md', 'utf8');

            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            await github.rest.pulls.update({
              owner: owner,
              repo: repo,
              pull_number: prNumber,
              body: body,
            });
